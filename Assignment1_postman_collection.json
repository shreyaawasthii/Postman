{
	"info": {
		"_postman_id": "a302e6bc-2fb5-468b-8a48-f6cdc4bd61df",
		"name": "Assignment1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32966582"
	},
	"item": [
		{
			"name": "POST REQUEST",
			"item": [
				{
					"name": "PT_CreateUser_validData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify that the response status code is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Capture the created user details from the response",
									"pm.test(\"Capture created user details\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    // Store the user details in environment variables",
									"    pm.environment.set(\"createdUserId\", jsonData.id);",
									"    pm.environment.set(\"createdUserName\", jsonData.name);",
									"    pm.environment.set(\"createdUserGender\", jsonData.gender);",
									"    pm.environment.set(\"createdUserEmail\", jsonData.email);",
									"});",
									"",
									"// Verify that the created user details match the provided data",
									"pm.test(\"Created user details match provided data\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    // Define the expected data",
									"    const expectedData = {",
									"        \"name\": \"Sakshi Awasthi\",",
									"        \"gender\": \"female\",",
									"    };",
									"",
									"    // Check each property in the expected data",
									"    for (const key in expectedData) {",
									"        pm.expect(jsonData[key]).to.eql(expectedData[key]);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer 2dcffcb2d6349214632f97dd7e360b7ca942ea28a4d53ccc2b08b7808110fcdb"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n        \"name\": \"Sakshi Awasthi\",\n        \"gender\": \"Female\",\n        \"email\": \"sakh@testing.com\",\n        \"status\": \"Active\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/public/v2/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "PT_CreateUser_with_ExistingEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('Email already in use error message', function () {",
									"    const jsonData = pm.response.json();",
									"    let emailError = null;",
									"    for (const error of jsonData) {",
									"        if (error.field === \"email\") {",
									"            emailError = error;",
									"            break;",
									"        }",
									"    }",
									"",
									"    pm.expect(emailError).to.not.be.null;",
									"    pm.expect(emailError).to.have.property('message').and.to.equal('has already been taken');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "2dcffcb2d6349214632f97dd7e360b7ca942ea28a4d53ccc2b08b7808110fcdb",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"akash@test.com\",\n    \"password\": \"StrongPassword123\",\n    \"status\": \"inactive\",\n    \"gender\" : \"male\",\n    \"dateOfBirth\": \"1990-01-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/v2/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "NT_CreateUser_MissingField",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Error message for missing field\", function () {",
									"    const jsonData = pm.response.json();",
									"    const missingFieldError = jsonData.find(error => error.field === \"email\");",
									"    pm.expect(missingFieldError).to.not.be.null;",
									"    pm.expect(missingFieldError).to.have.property(\"message\").and.to.equal(\"can't be blank\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "2dcffcb2d6349214632f97dd7e360b7ca942ea28a4d53ccc2b08b7808110fcdb",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"Shakuntala\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/v2/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "PT_CreateUser_AdditionalFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Akash Trivedi\",\n    \"email\": \"akaash@test.com\",\n    \"gender\": \"male\",\n    \"status\" : \"inactive\",\n    \"password\": \"Password1234\",\n    \"dateOfBirth\": \"1990-05-15\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/v2/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "4219475db831e58fe55c50d75c3ad82b88f87be3e36b227e488152255c0c1859",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GET REQUEST",
			"item": [
				{
					"name": "PT_Fetch_ExistingUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify that the response status code is 200 ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify that the response is in JSON array",
									"pm.test(\"Response is a JSON array\", function () {",
									"    pm.response.to.be.json;",
									"    pm.response.to.have.jsonBody();  ",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/public/v2/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "PT_Fetch_with_ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedUserId = '6768302';",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "2dcffcb2d6349214632f97dd7e360b7ca942ea28a4d53ccc2b08b7808110fcdb",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/public/v2/users/{{createdUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{createdUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NT_Fetch_NonExistingUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify the response status code is in the 404 not found",
									"pm.test(\"Status code indicates a client-side error\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Verify that the response contains an error message",
									"pm.test(\"Response body contains an error message for non-existent user\", function () {",
									"    const jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.equal(\"Resource not found\"); ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/public/v2/users/6766597",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"6766597"
							]
						}
					},
					"response": []
				},
				{
					"name": "NT_Fetch_with_Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message for resource not found\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\").and.to.equal(\"Resource not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/public/v2/users/Sakshi",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"Sakshi"
							]
						}
					},
					"response": []
				},
				{
					"name": "NT_Fetch_with_InvalidToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401); ",
									"});",
									"",
									"pm.test(\"Response contains invalid authentication error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\").and.to.equal(\"Invalid token\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "4219475db831e58fe55c5hsh0d75c3ad82b88f87be3e36b227e488152255c0c1859",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/public/v2/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "PT_Fetch_with_QueryParams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Request contains query parameters\", function () {",
									"     const queryParams = pm.request.url.query;",
									"      pm.expect(queryParams.has(\"name\")).to.be.true;",
									"      pm.expect(queryParams.get(\"name\")).to.equal(\"AkashTrivedi\");",
									"      pm.expect(queryParams.has(\"status\")).to.be.true;",
									"      pm.expect(queryParams.get(\"status\")).to.equal(\"inactive\");",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "2dcffcb2d6349214632f97dd7e360b7ca942ea28a4d53ccc2b08b7808110fcdb",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/public/v2/users/6768299?name=AkashTrivedi&status=inactive",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"6768299"
							],
							"query": [
								{
									"key": "name",
									"value": "AkashTrivedi"
								},
								{
									"key": "status",
									"value": "inactive"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NT_Fetch_NoAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 404 - NOT FOUND\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message for resource not found\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\").and.to.equal(\"Resource not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/public/v2/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UPDATE REQUEST",
			"item": [
				{
					"name": "PT_Update_Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify that the response body contains the updated user details",
									"pm.test(\"Response contains updated user details\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    // Verify that the response body contains the updated user details",
									"    pm.expect(jsonData).to.have.property(\"name\", \"Sakshi Trivedi\"); ",
									"    pm.expect(jsonData).to.have.property(\"email\", \"updatedemail@testing.com\");",
									"    pm.expect(jsonData).to.have.property(\"status\", \"active\"); ",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 4219475db831e58fe55c50d75c3ad82b88f87be3e36b227e488152255c0c1859"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Sakshi Trivedi\", \n    \"email\":\"updatedemail@testing.com\", \n    \"status\":\"active\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/public/v2/users/{{createdUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{createdUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NT_Update_NonExistingUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code indicates a client-side error\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response body contains an error message\", function () {",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");",
									"    pm.expect(pm.response.json().message).to.include(\"Resource not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"NonExisting\",\n    \"email\": \"noemail@test.com\",\n    \"status\": \"Active\",\n    \"password\": \"newpassword123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/v2/users/99999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"99999"
							]
						}
					},
					"response": []
				},
				{
					"name": "NT_Update_Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Unprocessed Entity\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verifying field set to null\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    let genderError = null;",
									"    for (const error of jsonData) {",
									"        if (error.field === \"gender\") {",
									"            genderError = error;",
									"            break;",
									"        }",
									"    }",
									"",
									"    pm.expect(genderError).to.not.be.null;",
									"",
									"    pm.expect(genderError).to.have.property(\"message\").and.to.equal(\"can't be blank, can be male of female\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"gender\" : null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/v2/users/{{createdUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{createdUserId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE REQUEST",
			"item": [
				{
					"name": "PT_DeleteUser_with_ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 - NO CONTENT\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"User is successfully deleted\", function () {",
									"    pm.sendRequest({",
									"        url: `https://gorest.co.in/public/v2/users/6767481`,",
									"        method: 'GET',",
									"        header: {",
									"            'Authorization': 'Bearer {{token}}'",
									"        }",
									"    }, function (error, response) {",
									"        pm.expect(error).to.not.be.ok;",
									"        pm.expect(response).to.not.have.status(\"4XX\");",
									"        pm.expect(response).to.not.have.status(\"5XX\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 4219475db831e58fe55c50d75c3ad82b88f87be3e36b227e488152255c0c1859"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/public/v2/users/{{createdUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{createdUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NT_DeleteUser_with_Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 NOT FOUND\", function () {",
									"    pm.response.to.have.status(404); ",
									"});",
									"",
									"pm.test(\"Response contains invalid authentication error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\").and.to.equal(\"Resource not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/public/v2/users/Utranshi",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"Utranshi"
							]
						}
					},
					"response": []
				},
				{
					"name": "PT_DeleteUser_QueryParams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/public/v2/users/6827675?name=TestUser&status=inactive",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"6827675"
							],
							"query": [
								{
									"key": "name",
									"value": "TestUser"
								},
								{
									"key": "status",
									"value": "inactive"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PT_Delete_NonExistingUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 NOT FOUND\", function () {",
									"    pm.response.to.have.status(404); ",
									"});",
									"",
									"pm.test(\"Response contains invalid authentication error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\").and.to.equal(\"Resource not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/public/v2/users/12345",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"12345"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "token",
			"value": "",
			"type": "default"
		}
	]
}